#!/bin/bash

#
# Helper script that setups a test Atoma network environment on Sui
#
# Usage: ./oneclicksetup.sh
#
# When this script is done, we will have a model named "llama" with one echelon
# ID 1, and a node registered to that model echelon.
# Also, it will create .env file in the sui directory with configuration that
# this script generated.
#

function abs_path_to_git_root_dir() {
    # Recursively find the repo root directory so that this script can be called
    # from anywhere

    if [ -d "atoma-contracts" ]; then
        echo "$(pwd)/atoma-contracts"
    elif [ "$(pwd)" == "/" ]; then
        echo "No atoma-contracts directory found"
        exit 1
    else
        cd ..
        abs_path_to_git_root_dir
    fi
}

entrance_dir=$(pwd)
root_dir=$(abs_path_to_git_root_dir)

cd $root_dir/sui

json=$(
    sui client publish \
        --with-unpublished-dependencies \
        --skip-dependency-verification \
        --gas-budget 1000000000 \
        --json \
        "${root_dir}/sui/packages/atoma"
)

# if last command failed, print the error
if [ $? -ne 0 ]; then
    echo "Failed to publish the package:\n\n"
    echo "${json}"
    echo
    echo "If you need gas, try running: sui client faucet"
    exit 1
fi

package=$(
    echo "${json}" | jq -r '.objectChanges[] | select(.packageId) | .packageId'
)

if [ -z "${package}" ] || [[ ! "${package}" =~ ^0x ]]; then
    echo "Could not publish the package. Exiting."
    exit 1
fi

treasury=$(
    echo "${json}" |
        jq -r '.objectChanges[] | select(.objectType | type == "string" and startswith("0x2::coin::TreasuryCap")) | .objectId'
)

if [ -z "${treasury}" ] || [[ ! "${treasury}" =~ ^0x ]]; then
    echo "Could not find the treasury. Exiting."
    exit 1
fi

faucet=$(
    echo "${json}" |
        jq -r '.objectChanges[] | select(.objectType | type == "string" and endswith("toma::Faucet")) | .objectId'
)

if [ -z "${faucet}" ] || [[ ! "${faucet}" =~ ^0x ]]; then
    echo "Could not find the faucet. Exiting."
    exit 1
fi

echo
active_address=$(sui client active-address)
echo "Active address: ${active_address}"
echo "Package: ${package}"
echo "Faucet: ${faucet}"
echo "Treasury: ${treasury}"

echo "Making the treasury into a faucet"
sui client call \
    --package "${package}" --module "toma" --function "enable_faucet" \
    --gas-budget 10000000 \
    --args "${faucet}" "${treasury}" || exit 1

echo "Using TOMA faucet"
./dev/faucet "${faucet}" || exit 1

echo
echo "Using CLI to setup resource on chain"

set -e

cd $root_dir/sui/dev

# These commands follow the README.md

./cli db add-model \
    --package "${package}" \
    --name "llama" \
    --text2text

./cli db add-model-echelon \
    --package "${package}" \
    --model "llama" \
    --echelon 1 \
    --input-fee-per-token 1 \
    --relative-performance 100

./cli db set-required-registration-toma-collateral \
    --package "${package}" \
    --new-amount 1

./cli db register-node --package "${package}"

./cli db add-node-to-model \
    --package "${package}" \
    --model "llama" \
    --echelon 1

echo
echo
echo "Package: ${package}"

echo
echo
echo "Sending test text prompt"

./cli gate submit-tell-me-a-joke-prompt \
    --package "${package}" \
    --model "llama"

echo
echo
echo "Storing IDs into .env file in the sui directory"
./cli db print-env --package "${package}" >"${root_dir}/sui/.env"
cat "${root_dir}/sui/.env"

# leave the caller where they started
cd $entrance_dir
